// Code generated by MockGen. DO NOT EDIT.
// Source: util/logger/logger.go

// Package mock_logger is a generated GoMock package.
package mock_logger

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zerolog "github.com/rs/zerolog"
)

// MockLoggerInterface is a mock of LoggerInterface interface.
type MockLoggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerInterfaceMockRecorder
}

// MockLoggerInterfaceMockRecorder is the mock recorder for MockLoggerInterface.
type MockLoggerInterfaceMockRecorder struct {
	mock *MockLoggerInterface
}

// NewMockLoggerInterface creates a new mock instance.
func NewMockLoggerInterface(ctrl *gomock.Controller) *MockLoggerInterface {
	mock := &MockLoggerInterface{ctrl: ctrl}
	mock.recorder = &MockLoggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerInterface) EXPECT() *MockLoggerInterfaceMockRecorder {
	return m.recorder
}

// Fatal mocks base method.
func (m *MockLoggerInterface) Fatal() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fatal")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerInterfaceMockRecorder) Fatal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLoggerInterface)(nil).Fatal))
}

// Info mocks base method.
func (m *MockLoggerInterface) Info() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockLoggerInterfaceMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerInterface)(nil).Info))
}

// Output mocks base method.
func (m *MockLoggerInterface) Output(w io.Writer) zerolog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", w)
	ret0, _ := ret[0].(zerolog.Logger)
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockLoggerInterfaceMockRecorder) Output(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockLoggerInterface)(nil).Output), w)
}

// Warn mocks base method.
func (m *MockLoggerInterface) Warn() *zerolog.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warn")
	ret0, _ := ret[0].(*zerolog.Event)
	return ret0
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerInterfaceMockRecorder) Warn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerInterface)(nil).Warn))
}
