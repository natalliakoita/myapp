// Code generated by MockGen. DO NOT EDIT.
// Source: repository/book.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "myapp/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookRepoInterface is a mock of BookRepoInterface interface.
type MockBookRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepoInterfaceMockRecorder
}

// MockBookRepoInterfaceMockRecorder is the mock recorder for MockBookRepoInterface.
type MockBookRepoInterfaceMockRecorder struct {
	mock *MockBookRepoInterface
}

// NewMockBookRepoInterface creates a new mock instance.
func NewMockBookRepoInterface(ctrl *gomock.Controller) *MockBookRepoInterface {
	mock := &MockBookRepoInterface{ctrl: ctrl}
	mock.recorder = &MockBookRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepoInterface) EXPECT() *MockBookRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookRepoInterface) CreateBook(ctx context.Context, book *model.Book) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, book)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookRepoInterfaceMockRecorder) CreateBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookRepoInterface)(nil).CreateBook), ctx, book)
}

// DeleteBook mocks base method.
func (m *MockBookRepoInterface) DeleteBook(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookRepoInterfaceMockRecorder) DeleteBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookRepoInterface)(nil).DeleteBook), ctx, id)
}

// ListBooks mocks base method.
func (m *MockBookRepoInterface) ListBooks(ctx context.Context) (model.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", ctx)
	ret0, _ := ret[0].(model.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookRepoInterfaceMockRecorder) ListBooks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookRepoInterface)(nil).ListBooks), ctx)
}

// ReadBook mocks base method.
func (m *MockBookRepoInterface) ReadBook(ctx context.Context, id uint) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBook", ctx, id)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBook indicates an expected call of ReadBook.
func (mr *MockBookRepoInterfaceMockRecorder) ReadBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBook", reflect.TypeOf((*MockBookRepoInterface)(nil).ReadBook), ctx, id)
}

// UpdateBook mocks base method.
func (m *MockBookRepoInterface) UpdateBook(ctx context.Context, book *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookRepoInterfaceMockRecorder) UpdateBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookRepoInterface)(nil).UpdateBook), ctx, book)
}
